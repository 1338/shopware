<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <parameter key="doctrine.dbal.connection_factory.class">Shopware\Framework\Doctrine\ConnectionFactory</parameter>

        <parameter key="shopware.slug.config" type="collection">
            <parameter key="regexp">/([^A-Za-z0-9\.]|-)+/</parameter>
            <parameter key="lowercase">false</parameter>
        </parameter>
    </parameters>

    <services>
        <!-- database / doctrine -->
        <service id="dbal_connection" alias="doctrine.dbal.default_connection" />

        <service id="PDO" class="PDO" public="true" >
            <factory class="AppKernel" method="getConnection" />
        </service>

        <!-- plugins -->
        <service id="shopware.plugins" class="Shopware\Framework\Plugin\PluginCollection">
            <factory service="kernel" method="getPlugins" />
        </service>

        <!-- Cache -->
        <service id="shopware.cache" alias="cache.app" />

        <!-- Routing -->
        <service id="router" alias="Shopware\Framework\Routing\Router" />

        <service id="Shopware\Framework\Routing\Router" class="Shopware\Framework\Routing\Router">
            <argument type="service" id="service_container" />
            <argument>%router.resource%</argument>
            <argument type="service" id="kernel" />
            <argument type="service" id="router.request_context" on-invalid="ignore" />
            <argument type="service" id="logger" on-invalid="ignore" />
            <argument type="service" id="Shopware\Framework\Routing\UrlResolver" />
            <argument type="service" id="Shopware\Framework\Routing\ShopFinder" />
            <argument id="shopware.cache" type="service"/>
            <argument type="service" id="shopware.api.route_collector"/>
            <argument type="service" id="security.token_storage"/>
        </service>

        <!-- Config -->
        <service id="Shopware\Framework\Config\CacheWarmer" class="Shopware\Framework\Config\CacheWarmer">
            <tag name="kernel.cache_warmer" />

            <argument type="service" id="dbal_connection" />
            <argument type="service" id="Shopware\Framework\Config\ConfigService" />
        </service>

        <service id="Shopware\Framework\Config\ConfigService" class="Shopware\Framework\Config\ConfigService">
            <argument type="service" id="dbal_connection" />
        </service>

        <service id="Shopware\Framework\Config\CachedConfigService" class="Shopware\Framework\Config\CachedConfigService" decorates="Shopware\Framework\Config\ConfigService">
            <argument type="service" id="Shopware\Framework\Config\CachedConfigService.inner" />
            <argument type="service" id="shopware.cache" />
        </service>

        <service id="shopware.config" alias="Shopware\Framework\Config\Config" />
        <service synthetic="true" id="Shopware\Framework\Config\Config" class="Shopware\Framework\Config\Config" />

        <service class="Shopware\Framework\Routing\ShopFinder" id="Shopware\Framework\Routing\ShopFinder">
            <argument id="dbal_connection" type="service"/>
        </service>

        <service id="slugify" class="Cocur\Slugify\Slugify" public="false">
            <argument>%shopware.slug.config%</argument>
        </service>

        <service class="Shopware\Framework\Routing\UrlResolver" id="Shopware\Framework\Routing\UrlResolver">
            <argument type="service" id="Shopware\Api\Seo\Repository\SeoUrlRepository"/>
        </service>

        <!-- Pluginsystem -->
        <service id="Shopware\Framework\Plugin\PluginManager" class="Shopware\Framework\Plugin\PluginManager">
            <argument>%kernel.plugin_dir%</argument>
            <argument type="service" id="kernel"/>
            <argument type="service" id="dbal_connection"/>
            <argument type="service" id="service_container"/>
            <argument type="service" id="Shopware\Framework\Plugin\RequirementValidator" />
        </service>

        <service class="Shopware\Framework\Plugin\XmlPluginInfoReader" id="Shopware\Framework\Plugin\XmlPluginInfoReader"/>

        <service class="Shopware\Framework\Plugin\RequirementValidator" id="Shopware\Framework\Plugin\RequirementValidator">
            <argument id="Shopware\Framework\Plugin\XmlPluginInfoReader" type="service"/>

        </service>


        <service class="Shopware\Framework\Plugin\Command\PluginUpdateCommand" id="Shopware\Framework\Plugin\Command\PluginUpdateCommand">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginInstallCommand" id="Shopware\Framework\Plugin\Command\PluginInstallCommand">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginActivateCommand" id="shopware.framework.commands.plugin_activate_command">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginDeactivateCommand" id="shopware.framework.commands.plugin_deactivate_command">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginUninstallCommand" id="shopware.framework.commands.plugin_uninstall_command">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginUpgradeCommand" id="shopware.framework.commands.plugin_upgrade_command">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginListCommand" id="shopware.framework.commands.plugin_list_command">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Command\DemodataCommand" id="shopware.framework.command.demodata_command">
            <tag name="console.command" command="framework:demodata" />
            <argument>framework:demodata</argument>
            <argument type="service" id="shopware.api.entity_writer"/>
        </service>

    </services>
</container>
